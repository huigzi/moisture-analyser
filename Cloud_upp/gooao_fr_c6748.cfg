/*
 * DSP/BIOS Configuration Script for TCP/IP Stack Example Application
 */

/* use the BIOS module to link in the sysbios library */
var Bios = xdc.useModule('ti.sysbios.BIOS');
//add by zzw
var ECM  = xdc.useModule ("ti.sysbios.family.c64p.EventCombiner");
var GIO 		= xdc.useModule('ti.sysbios.io.GIO');
var Hwi         = xdc.useModule ("ti.sysbios.family.c64p.Hwi");
var Swi         = xdc.useModule ("ti.sysbios.knl.Swi");
var Assert      = xdc.useModule('xdc.runtime.Assert');
var Log 		= xdc.useModule('xdc.runtime.Log');
var LoggerBuf	= xdc.useModule('xdc.runtime.LoggerBuf');
var timestamp   = xdc.useModule ("xdc.runtime.Timestamp");
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Clock 		= xdc.useModule('ti.sysbios.knl.Clock');

var cache       = xdc.useModule("ti.sysbios.family.c64p.Cache");
cache.MAR192_223 = 0x00000007;

/*
 *  Set up memory and cache for the EVM
 */
 
/* use modules for memory heap configuration */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Memory = xdc.useModule('xdc.runtime.Memory');
var Mmu = xdc.useModule('ti.sysbios.family.c64p.Cache');

/* create a HeapMem heap instance "systemHeap" */
var systemHeapParams = new HeapMem.Params;
systemHeapParams.size = 0x00020000;
var systemHeap = HeapMem.create(systemHeapParams);

/* set "systemHeap" to be the default Heap for the app */
Memory.defaultHeapInstance = systemHeap;

/*
 * ======== NDK configuration ========
 */

var Global = xdc.useModule('ti.ndk.config.Global');

/*
 * Don't generate any code, this example shows how to code the NDK stack thread
 * 'StackTest' manually.
 */
Global.enableCodeGeneration = false;

/* create the NDK stack Task thread */
var Task = xdc.useModule('ti.sysbios.knl.Task');


var ndkTaskParams = new Task.Params();
ndkTaskParams.priority = 6;
ndkTaskParams.stackSize = 8192;
Task.create('&NetworkMain', ndkTaskParams);

/*
 * Use the OMAPL138 Emac module.  This will cause the dirver library to link
 * into the program.
 */
xdc.useModule('ti.drv.omapl138.Emac');

/* call the init function at startup time */
Bios.startupFxns = ['&EVM_Init'];

//add by zzw
var iomFxns = "I2c_IOMFXNS";
var initFxn = "user_i2c_init";
var deviceParams = "i2cParams";
var deviceId = 0;
GIO.addDeviceMeta("/i2c0", iomFxns, initFxn, deviceId, deviceParams);

var iomFxns = "Uart_IOMFXNS";
var initFxn = "uartMaster_init";
var deviceParams = "uartMaster1Params";
var deviceId = 1;
GIO.addDeviceMeta("/uart1", iomFxns, initFxn, deviceId, deviceParams);


var uart1TaskParams = new Task.Params();
uart1TaskParams.priority = 5;
uart1TaskParams.instance.name = "taskUartMaster";
Program.global.task0 = Task.create("&tskUartMaster", uart1TaskParams);

var iomFxnsUart = "Uart_IOMFXNS";
var initFxnUart = "user_uart_init";
var deviceParamsUart = "uartParams";
var deviceIdUart = 2;
GIO.addDeviceMeta("/uart2", iomFxnsUart, initFxnUart, deviceIdUart, deviceParamsUart);

var uppTaskParams = new Task.Params();
uppTaskParams.priority = 5;
uppTaskParams.instance.name = "taskImageInput";
Program.global.task2 = Task.create("&tskImageInput", uppTaskParams);

var processTaskParams = new Task.Params();
processTaskParams.priority = 5;
processTaskParams.instance.name = "taskImageProcess";
Program.global.task3 = Task.create("&tskImageProcess", processTaskParams);

ECM.eventGroupHwiNum[0] = 7;
ECM.eventGroupHwiNum[1] = 8;
ECM.eventGroupHwiNum[2] = 9;
ECM.eventGroupHwiNum[3] = 10;

