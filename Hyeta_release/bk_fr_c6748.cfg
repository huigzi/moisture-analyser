/*
 * DSP/BIOS Configuration Script for TCP/IP Stack Example Application
 */

/* use the BIOS module to link in the sysbios library */
var Bios = xdc.useModule('ti.sysbios.BIOS');
Bios.startupFxns = ['&EVM_Init'];

var ECM         = xdc.useModule ("ti.sysbios.family.c64p.EventCombiner");
var GIO 		= xdc.useModule ('ti.sysbios.io.GIO');
var Hwi         = xdc.useModule ("ti.sysbios.family.c64p.Hwi");
var Swi         = xdc.useModule ("ti.sysbios.knl.Swi");
var Assert      = xdc.useModule ('xdc.runtime.Assert');
var timestamp   = xdc.useModule ("xdc.runtime.Timestamp");
var Semaphore   = xdc.useModule ('ti.sysbios.knl.Semaphore');
var Clock 		= xdc.useModule ('ti.sysbios.knl.Clock');
var List        = xdc.useModule ('ti.sdo.utils.List');
var Log 		= xdc.useModule ('xdc.runtime.Log');
var cache       = xdc.useModule ("ti.sysbios.family.c64p.Cache");
var Task        = xdc.useModule ('ti.sysbios.knl.Task');
var SysStd      = xdc.useModule ("xdc.runtime.SysStd");
var System      = xdc.useModule ("xdc.runtime.System");
var Timer       = xdc.useModule ("ti.sysbios.hal.Timer");

//var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');

System.SupportProxy = SysStd;

//cache.MAR192_223 = 0x00000007;

/* use modules for memory heap configuration */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Memory = xdc.useModule('xdc.runtime.Memory');

/* create a HeapMem heap instance "systemHeap" */
var systemHeapParams = new HeapMem.Params;
systemHeapParams.size = 0x0800000;
var systemHeap = HeapMem.create(systemHeapParams);
Memory.defaultHeapInstance = systemHeap;

//======== NDK configuration ========
var Global = xdc.useModule('ti.ndk.config.Global');
Global.enableCodeGeneration = false;

var ndkTaskParams = new Task.Params();
ndkTaskParams.priority = 6;
ndkTaskParams.stackSize = 8192;
Task.create('&NetworkMain', ndkTaskParams);

xdc.useModule('ti.drv.omapl138.Emac');

//add by zzw

//var iomFxns = "Uart_IOMFXNS";
//var initFxn = "uartMaster_init";
//var deviceParams = "uartMasterParams";
//var deviceId = 2;
//GIO.addDeviceMeta("/uart2", iomFxns, initFxn, deviceId, deviceParams);


//var uart2TaskParams = new Task.Params();
//uart2TaskParams.priority = 5;
//uart2TaskParams.instance.name = "taskUartMaster";
//Program.global.task0 = Task.create("&tskUartMaster", uart2TaskParams);


var iomFxns 		= "I2c_IOMFXNS";
var initFxn 		= "vpifUserI2cInit";
var deviceParams 	= "vpifI2cParams";
var deviceId 		= 0;
GIO.addDeviceMeta("/i2c0", iomFxns, initFxn, deviceId, deviceParams);

var iomFxns = "Vpif_IOMFXNS";
var initFxn = "userVpif0Init";
var deviceParams = "vpifParams";
var deviceId = 0;
GIO.addDeviceMeta("/Vpif0", iomFxns, initFxn, deviceId, deviceParams);

var vpTaskParams = new Task.Params();
vpTaskParams.priority = 5;
vpTaskParams.stackSize = 4096;
vpTaskParams.instance.name = "taskImageInput";
Program.global.task2 = Task.create("&tskImageInput", vpTaskParams);

var processTaskParams = new Task.Params();
processTaskParams.priority = 5;
processTaskParams.instance.name = "tskImageProcess";
Program.global.task3 = Task.create("&tskImageProcess", processTaskParams);

 
//ECM.events[46].fxn = '&UART1_isr';
//ECM.events[46].arg = 46;	//SYS_INT_UART1_INT UART1 event ID
//ECM.events[46].unmask = true;

ECM.eventGroupHwiNum[0] = 13;
ECM.eventGroupHwiNum[1] = 8;
ECM.eventGroupHwiNum[2] = 9;
ECM.eventGroupHwiNum[3] = 10;

